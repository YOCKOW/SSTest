#!/usr/bin/env zsh

################################################################################
# SSTFail
#   Â© 2021 YOCKOW.
#     Licensed under MIT License.
#     See "LICENSE.txt" for more information.
################################################################################

function fatal_error() {
  printf "\033[1;31mfatal error\033[m: %s\n" "$1" 1>&2
  exit 1
}

local -A parsed_arguments
zparseopts -D -E -M -A parsed_arguments -- \
  v -verbose=v \
  f -fatal-error=f \
  c: -assertion-command:=c  \
  l: -line:=l

failure_message="SSTest Failure."
if [[ $# -eq 1 ]]; then
  failure_message="$1"
elif [[ $# -gt 1 ]]; then
  fatal_error "SSTFail: Too many arguments."
fi

verbose=false
if [[ -n "${parsed_arguments[(i)-v]}" || "${SST_VERBOSE_MODE:-}" =~ "^(on|true)$" ]]; then
  verbose=true
fi

is_fatal_error=false
if [[ -n "${parsed_arguments[(i)-f]}" ]]; then
  is_fatal_error=true
fi

assertion_command_name="SSTFail"
if [[ -n "${parsed_arguments[(i)-c]}" ]]; then
  assertion_command_name="${parsed_arguments[-c]}"
fi

line=0
if  [[ -n "${parsed_arguments[(i)-l]}" && "${parsed_arguments[-l]}" =~ "^[0-9]+$" ]]; then
  line=$(( 0 + ${parsed_arguments[-l]} ))
fi

function print_verbose() {
  if [[ "$verbose" == "true" ]]; then
    printf "\033[2m%s\033[m\n" "$1"
  fi
}

if [[ ! -v SST_TEST_SUITE_RUNNER_PID ]]; then
  fatal_error "PID for \`SSTRunTestSuite\` is not found. \`SSTFail\` or \`SSTAssert*\` must be called within test cases."
fi
print_verbose "Found PID of \`SSTRunTestSuite\` is ${SST_TEST_SUITE_RUNNER_ID}."

if [[ ! -d "$SST_TEST_SUITE_RUNNER_TMP_DIR" ]]; then
  fatal_error "Temporary directory for the current runner is not found."
fi

test_case_path="$SST_CURRENT_TEST_CASE_FILE"
if [[ -z "$test_case_path" || ! -f "$test_case_path" ]]; then
  test_case_path="Unknown"
fi

test_suite_name=$(basename "$(dirname "$test_case_path")")
test_case_name=$(basename "$test_case_path")

full_message="${test_case_path}:${line}: error: - [${test_suite_name} ${test_case_name}] : ${assertion_command_name}"
if [[ "$is_fatal_error" == "true" ]]; then
  full_message="$full_message $(printf "\033[1;31mfatal error\033[m: $failure_message")"
else
  full_message="$full_message $(printf "\033[1;35mfailed\033[m: ${failure_message}")"
fi
echo "$full_message" >>"$SST_CURRENT_TEST_CASE_FAILURES_FILE"
printf "%s\n" "$full_message" 1>&2

exit 1