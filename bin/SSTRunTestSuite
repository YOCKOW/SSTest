#!/usr/bin/env zsh

################################################################################
# SSTRunTestSuite
#   Â© 2021 YOCKOW.
#     Licensed under MIT License.
#     See "LICENSE.txt" for more information.
################################################################################

set -u

command_name=$(basename "$0")

function view_help() {
  echo "Overview: Run Test Suite."
  echo ""
  echo "Usage: ${command_name} <Path to test suite directory> [Options]"
  echo ""
  echo "Options:"
  echo "  --help/-h      View this message."
  echo "  --verbose/-v   Verbose mode."
  echo "  --filter <filter>"
  echo "                 Only execute the specified test cases with the given "
  echo "                 name (regex)."
  echo "  --skip <skip>  Skip the specified test cases (regex)."
  echo ""
}

function view_version() {
  SSTest-version
}

if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
  view_help
  exit 0
elif [[ "${1:-}" == "--version" ]]; then
  view_version
  exit 0
fi

function view_error() {
  local message="$1"
  echo "$command_name: $message" 1>&2
  exit 1
}

verbose=false
filter=""
skip=""
test_suite_directory=""

local -A parsed_arguments
zparseopts -D -E -M -A parsed_arguments -- \
  v -verbose=v \
  -filter: \
  -skip: 

if [[ $# -lt 1 ]]; then
  view_error "Missing test suite directory."
elif [[ $# -gt 2 ]]; then
  view_error "Too many arguments."
else
  test_suite_directory="$1"
fi

if [[ -n "${parsed_arguments[(i)-v]}" || "${SST_VERBOSE_MODE:-}" =~ "^(on|true)$" ]]; then
  verbose=true
  export SST_VERBOSE_MODE="true"
fi

if [[ -n "${parsed_arguments[(i)--filter]}" ]]; then
  filter="${parsed_arguments[--filter]}"
fi

if [[ -n "${parsed_arguments[(i)--skip]}" ]]; then
  skip="${parsed_arguments[--skip]}"
fi

if [[ -z "$test_suite_directory" || ! -d "$test_suite_directory" ]]; then
  view_error "No such directory: $test_suite_directory"
fi 

test_suite_directory=$(cd "$test_suite_directory" && pwd)

function print_verbose() {
  if [[ "$verbose" == "true" ]]; then
    printf "\033[2m%s\033[m\n" "$1"
  fi
}

print_verbose "Verbose mode: on"
print_verbose "Test Suite directory: '${test_suite_directory}'"
if [[ -n "$filter" ]]; then
  print_verbose "Filter: ${filter}"
fi
if [[ -n "$skip" ]]; then
  print_verbose "Skip: ${skip}"
fi

temporary_directory="$(dirname $(mktemp -u))/jp.YOCKOW.SSTRunTestSuite/$$"
mkdir -p "$temporary_directory"
print_verbose "Temporary directory was created at '${temporary_directory}'"

# Export variables
##################
if [[ -v SST_TEST_SUITE_RUNNER_PID ]]; then
  view_error "Duplicate \`${command_name}\`(pid: ${SST_TEST_SUITE_RUNNER_PID}) exists."
fi
export SST_TEST_SUITE_RUNNER_PID=$$
export SST_TEST_SUITE_RUNNER_TMP_DIR="$temporary_directory"
export SST_TEST_SUITE_DIR="$test_suite_directory"
## Variables that are set before running each case.
export SST_CURRENT_TEST_CASE_FILE
export SST_CURRENT_TEST_CASE_FAILURES_FILE


# Run tests!
############

function emphasized_print() {
  printf "\033[1;4m%s\033[m\n" "$1"
}

function mildly_emphasized_print() {
  printf "\033[1m%s\033[m\n" "$1"
}

set -e
test_suite_name=$(basename "$test_suite_directory")

lock_file="${test_suite_directory}/.SSTLockFile"
if [[ -f "$lock_file" ]]; then
  view_error "Another process may be running this test suite named \`${test_suite_name}\`.\nTry the following command if you believe that the test suite already finished.\n\n\trm \"$lock_file\"\n"
fi
touch "$lock_file"
print_verbose "Lock file was created at '${lock_file}'"

function clean_up() {
  rm "$lock_file"
  print_verbose "Lock file was removed."
  rm -rf "$temporary_directory"
  print_verbose "Temporary directory was removed."
}

function strictly_exec() {
  command_file="$1"
  stderr_file=$(mktemp)

  set +e

  chmod u+x "$command_file"
  print_verbose "Execute \"$command_file\""

  exit_status_code=-1
  { { "$command_file" 3>&2 2>&1 1>&3; } | tee "$stderr_file" } 3>&2 2>&1 1>&3
  exit_status_code="${pipestatus[1]}"
  print_verbose "Exit Status: $exit_status_code"

  if [[ $exit_status_code -ne 0 ]]; then
    return $exit_status_code
  elif [[ -s "$stderr_file" ]]; then
    # Make sure that no errors have occurred as possible...
    cat "$stderr_file" | while read line; do
      splitted=(${(@s/:/)line})
      if [[ ${#splitted[@]} -lt 3 ]]; then
        continue
      fi
      if [[ "${splitted[1]}" == "$command_file" && "${splitted[2]}" =~ "^[0-9]+$" ]]; then
        # TODO: Check "${splitted[3]}"
        return 1
      fi
    done
  fi
  
  return 0
}

test_suite_start_time=$(SSTTime)
emphasized_print "Test Suite '${test_suite_name}' started at $(SSTDate)" 1>&2

## START

test_suite_init_file="${test_suite_directory}/init"
if [[ -f "$test_suite_init_file" ]]; then
  strictly_exec "$test_suite_init_file"
  if [[ $? -ne 0 ]]; then
    clean_up
    view_error "Initialization failed."
  fi
fi

number_of_tests=0
number_of_failures=0

for test_file in "${test_suite_directory}"/test*; do
  test_case_name=$(basename "$test_file")

  if [[ -n "$filter" &&  ! "$test_case_name" =~ "$filter" ]]; then
    print_verbose "Test Case '$test_case_name' was skipped due to the filter."
    continue
  fi
  if [[ -n "$skip" &&  "$test_case_name" =~ "$skip" ]]; then
    print_verbose "Test Case '$test_case_name' was skipped due to the skip condition."
    continue
  fi

  SST_CURRENT_TEST_CASE_FILE="$test_file"
  SST_CURRENT_TEST_CASE_FAILURES_FILE="${temporary_directory}/$test_case_name"

  test_case_stderr_file="${temporary_directory}/$test_case_name.stderr"
  touch "$test_case_stderr_file"
  print_verbose "Temporary file was created at '$test_case_stderr_file'"

  mildly_emphasized_print "Test Case '-[${test_suite_name} ${test_case_name}]' started." 1>&2
  test_case_start_time=$(SSTTime)

  test_case_set_up_file="${test_suite_directory}/set-up"
  if [[ -f "$test_case_set_up_file" ]]; then
    strictly_exec "$test_case_set_up_file"
    if [[ $? -ne 0 ]]; then
      clean_up
      view_error "Setup failed."
    fi
  fi

  # TEST CASE
  successful=true
  strictly_exec "$test_file"
  exit_status_code=$?

  if [[ $exit_status_code -ne 0 || -s "$SST_CURRENT_TEST_CASE_FAILURES_FILE" ]]; then
    successful=false
  fi

  test_case_tear_down_file="${test_suite_directory}/tear-down"
  if [[ -f "$test_case_tear_down_file" ]]; then
    strictly_exec "$test_case_tear_down_file"
    if [[ $? -ne 0 ]]; then
      clean_up
      view_error "Tearing-down failed."
    fi
  fi

  elapsed_time=$(SSTTime --since $test_case_start_time | SSTFloorFraction ${SST_FRACTION_DIGITS:-6})
  number_of_tests=$(( 1 + $number_of_tests ))
  if [[ "$successful" == "true" ]]; then
    mildly_emphasized_print "Test Case '-[${test_suite_name} ${test_case_name}]' passed (${elapsed_time} seconds)." 1>&2
  else
    mildly_emphasized_print "Test Case '-[${test_suite_name} ${test_case_name}]' failed (${elapsed_time} seconds)." 1>&2
    number_of_failures=$(( 1 + $number_of_failures ))
  fi
done

test_suite_finalize_file="${test_suite_directory}/finalize"
if [[ -f "$test_suite_finalize_file" ]]; then
  strictly_exec "$test_suite_finalize_file"
  if [[ $? -ne 0 ]]; then
    clean_up
    view_error "Finalization failed."
  fi
fi

clean_up

elapsed_time=$(SSTTime --since $test_suite_start_time | SSTFloorFraction ${SST_FRACTION_DIGITS:-6})

if [[ $number_of_failures -eq 0 ]]; then
  emphasized_print "Test Suite '${test_suite_name}' passed at $(SSTDate)." 1>&2
else
  emphasized_print "Test Suite '${test_suite_name}' failed at $(SSTDate)." 1>&2
fi

printf "\033[3m\t Executed ${number_of_tests} tests, with ${number_of_failures} failures in ${elapsed_time} seconds.\033[m\n" 1>&2

if [[ -v SST_NUMBER_OF_TESTS_FILE && -v SST_NUMBER_OF_FAILURES_FILE ]]; then
  print_verbose "Write the number of tests/failures to temporary files."
  echo "${number_of_tests}" >"$SST_NUMBER_OF_TESTS_FILE"
  echo "${number_of_failures}" >"$SST_NUMBER_OF_FAILURES_FILE"
fi

if [[ "$number_of_failures" -eq 0 ]]; then
  exit 0
else
  exit 1
fi